package ${plugin.parameter.acitionPackageName};
#set( $objectName = "$table.getVariableName()")
#set( $className = "${table.destinationClassName}")

import com.taiji.core.webwork.action.ProtectedDetailAction;
import  ${plugin.parameter.domainPackageName}.*;
import com.taiji.system.domain.DictRow;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.opensymphony.xwork.ActionContext;
import com.opensymphony.webwork.ServletActionContext;

import java.util.*;
import javax.servlet.http.HttpServletRequest;

public class ${className}Action extends ProtectedDetailAction {	
	private static final Log log = LogFactory.getLog(${className}Action.class);
    #foreach($relationshipRole in $table.relationshipRoles)
    #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
    #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
    #set( $one2one = $relationshipRole.relation.one2One )
    #set( $many2many = $relationshipRole.relation.many2Many )
    #set( $target = $relationshipRole.getTarget($plugin))
    #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
    #set( $one2many = !$many2many && !$one2one)
   	#if($one2one)
   	private ${relationName} ${relationObjectName};
   	#end
    #if($one2many && $relationshipRole.targetMany)
  	#set( $listTypeName = "${table.getMixSqlTableName($relationshipRole)}")
	#set( $listType = "${plugin.getListType($listTypeName)}")
	#if($listType!="normal")
	public int stSize;
    private List ${relationObjectName}List;
	#end
    #if($listType=="simple")
    private List ${relationObjectName}ListDict;
	private String dictAbbr;
	private String dictField;
	#end
	#end
    #if($many2many)
   	private List select${relationName};
   	#end
	#end
   	public void setEntityId(Integer entityid) {
	
	  #foreach($relationshipRole in $table.relationshipRoles)
      #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
      #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
      #set( $one2one = $relationshipRole.relation.one2One )
      #set( $many2many = $relationshipRole.relation.many2Many )
      #set( $one2many = !$many2many && !$one2one)

      #if($one2many && $relationshipRole.targetMany)
  	  #set( $listTypeName = "${table.getMixSqlTableName($relationshipRole)}")
	  #set( $listType = "${plugin.getListType($listTypeName)}")	  
	  #if($listType=="normal")
	  if(entityid.equals(new Integer(0))){
	 	  Integer ${objectName}Id = (Integer)ActionContext.getContext().getSession().get("${objectName}Id");
		  if(${objectName}Id!=null && !${objectName}Id.equals(new Integer(0))){
				entityid = ${objectName}Id;
		  } 
	  }
	  if(!entityid.equals(new Integer(0))){
		ActionContext.getContext().getSession().put("${objectName}Id",entityid);
	  } 
      #end
	  #if($listType!="normal")
      if(get${className}()!=null)  {
         if(${relationObjectName}List==null) {
				${relationObjectName}List = new ArrayList();	
		 }
         ${relationObjectName}List.clear();
         Set tempSet = (Set)get${className}().get${relationName}s();
         ${relationObjectName}List.addAll(tempSet);
         setStSize(tempSet.size());
      }
	  #end           
      #end
      #end
      super.setEntityId(entityid);
	}

	public String save() {	
	  #foreach($relationshipRole in $table.relationshipRoles)
      #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
      #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
      #set( $one2one = $relationshipRole.relation.one2One )
      #set( $target = $relationshipRole.getTarget($plugin))
      #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
      #set( $many2many = $relationshipRole.relation.many2Many ) 
      #set( $one2many = !$many2many && !$one2one)
      #set ($keyColumn = $target.pkColumn) 
      #set ($keyvar = ${keyColumn.variableName}) 
      #set ($keyCVar = ${keyColumn.capitalisedVariableName})      
      #if($one2many && $relationshipRole.targetMany)
	  #set( $listTypeName = "${table.getMixSqlTableName($relationshipRole)}")
	  #set( $listType = "${plugin.getListType($listTypeName)}")	   
	     
	  #if($listType=="normal")
	  get${className}().setSubmitflag(new Integer(1));		   
	  #end 
	  #if($listType!="normal")  
      if(${relationObjectName}List!=null) {
         Set ${relationObjectName}s=new HashSet();
		 for(int i=0;i<${relationObjectName}List.size();i++){
			${relationName} ${relationObjectName} = (${relationName})${relationObjectName}List.get(i);
			#set($cond = "" )
			#foreach( $column in $target.notKeyColumns)
			#set($temp="${relationObjectName}.get${column.capitalisedVariableName}()!=null")
			#set ($cond="${temp} || ${cond}")
			#end
			#set($cond="${cond} false" )
			if(${cond}){
			   ${relationObjectName}.set${className}(get${className}());
			   ${relationObjectName}s.add(${relationObjectName});
			}
		 }	
		 get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}s);		  
	 }	
	 #end
	 #end
	  
     
	 #if($many2many)
	 get${className}().$table.getSetterName($relationshipRole)(getSelect${relationName}s());   	       
   	 #end 
      #if($one2one)
      if(${relationObjectName}!=null){
         ${relationObjectName} = new ${relationName}();
      }
      ${relationObjectName}.set${className}(get${className}());
      get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}); 
	  #end 
	 #end
     return super.save();
	}
	
	public String update() {
     #foreach($relationshipRole in $table.relationshipRoles)
	 #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
     #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
     #set( $one2one = $relationshipRole.relation.one2One )
     #set( $target = $relationshipRole.getTarget($plugin))
     #set( $many2many = $relationshipRole.relation.many2Many )
     #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
     #set( $one2many = !$many2many && !$one2one)        
		 
	 #if($one2many && $relationshipRole.targetMany)
	 #set( $listTypeName = "${table.getMixSqlTableName($relationshipRole)}")
	 #set( $listType = "${plugin.getListType($listTypeName)}")
	 #if($listType=="normal")		 
	 get${className}().setSubmitflag(new Integer(1));
	 #end
	 #if($listType!="normal") 
     if(${relationObjectName}List!=null) {
        get${className}().$table.getGetterName($relationshipRole)().clear();
        Set temp${relationName}Set = new HashSet();
        for(int i=0;i<${relationObjectName}List.size();i++){
			${relationName} ${relationObjectName} = (${relationName})${relationObjectName}List.get(i);
			#set($cond = "" )
			#foreach( $column in $target.notKeyColumns)
			#set($temp="${relationObjectName}.get${column.capitalisedVariableName}()!=null")
			#set ($cond="${temp} || ${cond}")
			#end
			#set($cond="${cond} false" )
			if(${cond}){
			   temp${relationName}Set.add(${relationObjectName});
			   ${relationObjectName}.set${className}(get${className}());
			}
		}
		get${className}().$table.getGetterName($relationshipRole)().addAll(temp${relationName}Set);	
	 }		    
	 #end 
     #end	 
	 #if($many2many)
   	 get${className}().$table.getSetterName($relationshipRole)(getSelect${relationName}s());
   	 #end 
     #if($one2one)
     ${relationObjectName}.set${className}(get${className}());
     get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}); 
	 #end  	      	 
	 #end		 
	 return super.update();
	}
    #foreach($relationshipRole in $table.relationshipRoles)
    #set( $many2many = $relationshipRole.relation.many2Many )
    #set( $one2one = $relationshipRole.relation.one2One )
    #set( $target = $relationshipRole.getTarget($plugin))
    #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
    #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
    #set( $one2many = !$many2many && !$one2one)            
    #if($one2one)
 	public ${relationName} get${relationName}() {
 	    if(${relationObjectName}==null) {
 	     if(get${className}()!=null) {
 	        ${relationObjectName} = get${className}().$table.getGetterName($relationshipRole)();
 	     }
 	    }
		return ${relationObjectName};
	}
	
	public void set${relationName}(${relationName} ${relationObjectName}) {
		this.${relationObjectName} = ${relationObjectName};		
	}  
	#end
		
    #if($one2many && $relationshipRole.targetMany)
	#set( $listTypeName = "${table.getMixSqlTableName($relationshipRole)}")
	#set( $listType = "${plugin.getListType($listTypeName)}")	
	#if($listType!="normal") 
	public void set${relationName}sList(List ${relationObjectName}List){
	  HttpServletRequest request = ServletActionContext. getRequest();
	  if(request.getParameter("stSize")!=null)
		stSize=Integer.parseInt(request.getParameter("stSize"));
	  for(int i=0;i<stSize;i++){
			${relationObjectName}List.add(new ${relationName}());
	  }	
	  this.${relationObjectName}List = ${relationObjectName}List;
	}	
	
	public List get${relationName}sList() {
		return ${relationObjectName}List;
	}
		
	public int getStSize(){
		return this.stSize;
	}
	
	public void setStSize(int stSize){
		this.stSize=stSize;
	}	 
	#end
	#if($listType=="simple") 
	
    public void set${relationName}ListDict(List ${relationObjectName}ListDict){
	  this.${relationObjectName}ListDict = ${relationObjectName}ListDict;
	}
	
	public List get${relationName}ListDict(){
	  if(this.${relationObjectName}ListDict == null){
		${relationObjectName}ListDict = dictService.getDictExpList(dictAbbr,get${relationName}sList(),dictField);
		for(int i = 0;i<${relationObjectName}ListDict.size();i++){
		    DictRow dr = (DictRow)${relationObjectName}ListDict.get(i);
			if(dr.getValue() == null){
			   dr.setValue(new ${relationName}());
			}
		}
	  }
	  return ${relationObjectName}ListDict;
    }	 
	public String getDictAbbr() {
	  return dictAbbr;
	}
	public void setDictAbbr(String dictAbbr) {
	  this.dictAbbr = dictAbbr;
	}
	public String getDictField() {
	  return dictField;
	}
	public void setDictField(String dictField) {
	  this.dictField = dictField;
	}	 
	#end 
	#end	
    #if($many2many)    
    public Map getAll${relationName}s() {
 	  Map result = new LinkedHashMap();		
	  List objectList = coreService.findAll(${relationName}.class);
	  if(objectList != null) {
		 Iterator iter = objectList.iterator();
		 while(iter.hasNext()) {
		   ${relationName} object =(${relationName}) iter.next();
		//    result.put(object.getId(),object.getName());
		 }
	  }
	  return result;	   
    }	
    	
    private Set getSelect${relationName}s() {	
	 if(select${relationName}==null)  return null;
	 Iterator iter = select${relationName}.iterator();
	 Set ${relationObjectName}Set = new LinkedHashSet();
	 while(iter.hasNext()) {
		Integer ${relationObjectName}Id = Integer.valueOf((String)iter.next());
		${relationName} ${relationObjectName} = (${relationName}) coreService.getEntityObjectById(${relationName}.class,${relationObjectName}Id);
		${relationObjectName}Set.add(${relationObjectName});
	  }
	  return ${relationObjectName}Set; 
	}	
	
    public List getAllCustom${relationName}s() {
  	  List result = new ArrayList();
	  Set $relationObjectName = (Set)get${className}().$table.getGetterName($relationshipRole)();
	  Iterator iter = ${relationObjectName}.iterator();
	  while(iter.hasNext()) {
		result.add(((${relationName})iter.next()).getId());
	  }
	  return result;
	} 	
	public void setSelect${relationName}s (List select${relationName}) {
	    this.select${relationName} = select${relationName};
	}
    #end
    #end
    
    public Class getPersistentClass(){
	   return ${className}.class;
	}
	public ${className} get${className}() {
	   return (${className}) getEntity();
	}
	public void set${className}(${className} ${objectName}) {
	   setEntity(${objectName});	
	}
}