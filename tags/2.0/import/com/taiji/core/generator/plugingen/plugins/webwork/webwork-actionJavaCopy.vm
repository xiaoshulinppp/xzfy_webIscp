package ${plugin.parameter.acitionPackageName};
#set( $objectName = "$table.getVariableName()")
#set( $className = "${table.destinationClassName}")

import com.taiji.core.webwork.action.ProtectedDetailAction;
import com.taiji.info.domain.*;
import com.taiji.user.domain.User;
import com.taiji.system.domain.DictRow;
import com.taiji.core.util.Constants;
import com.taiji.core.util.CommonTool;
import javax.servlet.http.HttpServletRequest;

import com.opensymphony.webwork.ServletActionContext;
import com.opensymphony.xwork.ActionContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.*;



public class ${className}Action extends ProtectedDetailAction {
	
	private static final Log log = LogFactory.getLog(${className}Action.class);
	private String inLine;
	private String perm;
    #foreach($relationshipRole in $table.relationshipRoles)
    #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
    #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
    #set( $one2one = $relationshipRole.relation.one2One )
    #set( $many2many = $relationshipRole.relation.many2Many )
    #set( $target = $relationshipRole.getTarget($plugin))
    #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
    #if(!$one2one)
   	private List select${relationName};
   	#end
   	#if($one2one)
   	private ${relationName} ${relationObjectName};
   	#end
    #if( $relationshipRole.targetMany )
    public int stSize;  
    private List ${relationObjectName}List;
    private List ${relationObjectName}ListDict;
    private String dictAbbr;
    private String dictField;
   	#end   
   #if(!$relationshipRole.targetMany && $relationshipRole.originMany) 
   private Integer ${relationObjectName}Id = new Integer(0); 	
	#end
	#end
   
    public void setPerm(String perm){
        this.perm = perm;
    }
    public String getPerm(){
        return perm;
    }
  	public void setEntityId(Integer entityid) {
		 super.setEntityId(entityid);
	     #foreach($relationshipRole in $table.relationshipRoles)
         #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
         #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
         #set( $one2one = $relationshipRole.relation.one2One )
         #set( $many2many = $relationshipRole.relation.many2Many )
         #if($one2one)
         if(get${className}()!=null)
        $relationObjectName = get${className}().get$relationName();
         #end
         #if($relationshipRole.targetMany )
         if(get${className}()!=null)  {
           if(${relationObjectName}List==null) {
				${relationObjectName}List = new ArrayList();	
		   }
           ${relationObjectName}List.clear();
           Set tempSet = (Set)get${className}().get${relationName}s();
           ${relationObjectName}List.addAll(tempSet);
           setStSize(tempSet.size());
         }
         #end
         #end		
	}

	public String save() throws Exception{	
		
    	User currentUser = (User) ActionContext.getContext().getSession().get(Constants.USER_LOGIN);
	
	     #foreach($relationshipRole in $table.relationshipRoles)
         #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
         #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
         #set( $one2one = $relationshipRole.relation.one2One )
         #set( $target = $relationshipRole.getTarget($plugin))
         #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
         #set( $many2many = $relationshipRole.relation.many2Many ) 
         #set ($keyColumn = $target.pkColumn) 
         #set ($keyvar = ${keyColumn.variableName}) 
         #set ($keyCVar = ${keyColumn.capitalisedVariableName})        
         #if($one2one)
         ${relationObjectName}.set${className}(get${className}());
       get${className}().$table.getSetterName($relationshipRole)(${relationObjectName});
         #else
         #if( $relationshipRole.targetMany )
      	 Set ${relationObjectName}Set = getSelect${relationName}s(); 		
      	 #else
        Set ${relationObjectName}Set = getSelect${relationName}();  
         #end 
         
        if(${relationObjectName}Set!=null) {
      	   #if( $relationshipRole.targetMany )	      	      
		  get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}Set);
		   #else
	 	  Iterator iter = ${relationObjectName}Set.iterator();
      	  ${relationName} ${relationObjectName}Temp = (${relationName})iter.next(); 
	      get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}Temp);
		    #end
		}
		 #if( $relationshipRole.targetMany )
		 Set ${relationObjectName}Temp = get${relationName}sSelectRecord();
        if(${relationObjectName}Temp !=null) {
		   get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}Temp);
		 }
	 

        if(${relationObjectName}List!=null) {
        Set ${relationObjectName}s=new HashSet();
		  for(int i=0;i<${relationObjectName}List.size();i++){
			  ${relationName} ${relationObjectName} = (${relationName})${relationObjectName}List.get(i);
			   #set($cond = "" )
			    #foreach( $column in $target.notKeyColumns)
			   #set($temp="${relationObjectName}.get${column.capitalisedVariableName}()!=null")
			   #set ($cond="${temp} || ${cond}")
			   #end
			   #set($cond="${cond} false" )
			  if(${cond}){
			     ${relationObjectName}.set${className}(get${className}());
			     ${relationObjectName}s.add(${relationObjectName});
			  }
		  }	
		  get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}s);
	    }	 	 
		 #end
		 
		 #end
		 
		 #end
		 #set($flag = "false")
	    #foreach($relationshipRole in $table.relationshipRoles)	 
	    #if( $relationshipRole.targetMany && $flag == "false")
	 Integer ${objectName}inlineId =(Integer)ActionContext.getContext().getSession().get("${objectName}Id");  
	  if(${objectName}inlineId!=null && !${objectName}inlineId.equals(new Integer(0)))  {
      #set ($keyColumn = $table.pkColumn) 
      #set ($keyvar = ${keyColumn.variableName}) 
      #set ($keyCVar = ${keyColumn.capitalisedVariableName})
       get${className}().set${keyCVar}(${objectName}inlineId);
		get${className}().setSubmitflag(new Integer(1));
		return super.update(); 
	  }
	  #set($flag = "true")
	#end
	#end
	
	     return super.save();

	}
	public String update() throws Exception {
	     #foreach($relationshipRole in $table.relationshipRoles)
	     #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
         #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
         #set( $one2one = $relationshipRole.relation.one2One )
         #set( $target = $relationshipRole.getTarget($plugin))
         #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
         #if($one2one)
        get${className}().$table.getSetterName($relationshipRole)(${relationObjectName});    
         #else 
         #if( $relationshipRole.targetMany )
      	 Set ${relationObjectName}Set = getSelect${relationName}s();
      	 #else
         Set ${relationObjectName}Set = getSelect${relationName}();  
         #end  	 	
      	  if(${relationObjectName}Set!=null) {	
	     #if( $relationshipRole.targetMany )	
		 get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}Set);
		 #else
	 	  Iterator iter = ${relationObjectName}Set.iterator();
      	  ${relationName} ${relationObjectName}Temp = (${relationName})iter.next(); 
		 get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}Temp);
		  #end
		  }
         #if( $relationshipRole.targetMany )	
		 Set ${relationObjectName}Temp = get${relationName}sSelectRecord();
         if(${relationObjectName}Temp !=null) {
		  get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}Temp);
		 }
if(${relationObjectName}List!=null) {
            get${className}().$table.getGetterName($relationshipRole)().clear();
               for(int i=0;i<${relationObjectName}List.size();i++){
			  ${relationName} ${relationObjectName} = (${relationName})${relationObjectName}List.get(i);
			   #set($cond = "" )
			    #foreach( $column in $target.notKeyColumns)
			   #set($temp="${relationObjectName}.get${column.capitalisedVariableName}()!=null")
			   #set ($cond="${temp} || ${cond}")
			   #end
			   #set($cond="${cond} false" )
			  if(${cond}){
	            get${className}().$table.getGetterName($relationshipRole)().add(${relationObjectName});		     
			    ${relationObjectName}.set${className}(get${className}());
			  }
		  }
		}	
		  #end
		 #end
		 #end
		 
  #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
       #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       #set ($keyColumnTarget = $target.pkColumn) 
       #set ($keyvarTarget = ${keyColumnTarget.variableName}) 
       #set ($keyCVarTarget = ${keyColumnTarget.capitalisedVariableName})
       #if($one2one)  
        ${relationName} ${relationObjectName}temp =get${className}().get${relationName}();
        Integer  ${relationObjectName}Id = ${relationObjectName}temp.get${keyCVarTarget}();
        CommonTool.copyBean(${relationObjectName}temp,${relationObjectName});
        ${relationObjectName}temp.set${keyCVarTarget}(${relationObjectName}Id);
    	get${className}().set${relationName}(${relationObjectName}temp);  	  
	    ${relationObjectName}temp.set${className}(get${className}());	
	   #end	
       #end	
       #end  
        #set ($flag = "false")
	    #foreach($relationshipRole in $table.relationshipRoles)	 
	    #if( $relationshipRole.targetMany && $flag == "false")
       get${className}().setSubmitflag(new Integer(1));
    	  #set($flag = "true")
	    #end
	   #end    
		return super.update();
	}
     #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
       #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
   #if($one2one)
 	public ${relationName} get${relationName}() {
		return ${relationObjectName};
	}
	public void set${relationName}(${relationName} ${relationObjectName}) {
		this.${relationObjectName} = ${relationObjectName};		
	}  
   
   #else   
   #if( $relationshipRole.targetMany )	
   public Map getAll${relationName}s() {
   #else
	public Map getAll${relationName}() {
   #end
		Map result = new LinkedHashMap();		
		List objectList = coreService.findAll(${relationName}.class);
		if(objectList != null) {
		   Iterator iter = objectList.iterator();
		   while(iter.hasNext()) {
		       ${relationName} object =(${relationName}) iter.next();
		    //   result.put(String.valueOf(object.getId()),object.getName());	   	
		   }
		}
		return result;	
	}
	 #if( $relationshipRole.targetMany )
	private Set getSelect${relationName}s() {
     #else
    private Set getSelect${relationName}() {  
    #end
		if(select${relationName}==null)
		   return null;
		Iterator iter = select${relationName}.iterator();
		Set ${relationObjectName}Set = new LinkedHashSet();
		while(iter.hasNext()) {
			Integer ${relationObjectName}Id = Integer.valueOf((String)iter.next());
			${relationName} ${relationObjectName} = (${relationName}) coreService.getEntityObjectById(${relationName}.class,${relationObjectName}Id);
			${relationObjectName}Set.add(${relationObjectName});
		}
	    return ${relationObjectName}Set; 
	}
  #if( $relationshipRole.targetMany )	
    public List getAllCustom${relationName}s() {
   #else
	public List getAllCustom${relationName}()  {
   #end
	
		List result = new ArrayList();
		#if( $relationshipRole.targetMany )	
		Set $relationObjectName = (Set)get${className}().$table.getGetterName($relationshipRole)();
		Iterator iter = ${relationObjectName}.iterator();
		while(iter.hasNext()) {
			result.add(String.valueOf(((${relationName})iter.next()).getId()));
		}
		#else
		 ${relationName} ${relationObjectName} =get${className}().$table.getGetterName($relationshipRole)();
		 result.add(String.valueOf(${relationObjectName}.getId()));
	    #end
		return result;
	}
	 #if( $relationshipRole.targetMany )	
	public void setSelect${relationName}s (List select${relationName}) {
	    this.select${relationName} = select${relationName};
	}

	public Set get${relationName}sSelectRecord() {
		if(getSelectRecord()==null)
	      return null;
	    Iterator iter = getSelectRecord().iterator();
	    Set ${relationObjectName}Set = new LinkedHashSet();
	    while(iter.hasNext()) {
		  Integer ${relationObjectName}Id = Integer.valueOf((String)iter.next());
		  ${relationName} ${relationObjectName} = (${relationName})coreService.getEntityObjectById(${relationName}.class,${relationObjectName}Id);
		  ${relationObjectName}Set.add(${relationObjectName});
	    }
	    return ${relationObjectName}Set; 
	}	
	public void set${relationName}sList(List ${relationObjectName}List){
		
		HttpServletRequest request = ServletActionContext. getRequest();
		if(request.getParameter("stSize")!=null)
		stSize=Integer.parseInt(request.getParameter("stSize"));
		for(int i=0;i<stSize;i++){
			${relationObjectName}List.add(new ${relationName}());
		}
	
		this.${relationObjectName}List = ${relationObjectName}List;
	}	
	public List get${relationName}sList() {
		return ${relationObjectName}List;
	}	
	public int getStSize(){
		return this.stSize;
	}
	public void setStSize(int stSize){
		this.stSize=stSize;
	}
	public void set${relationName}ListDict(List ${relationObjectName}ListDict){
		this.${relationObjectName}ListDict = ${relationObjectName}ListDict;
	}
	
	public List get${relationName}ListDict(){
		if(this.${relationObjectName}ListDict == null){
			${relationObjectName}ListDict = dictService.getDictExpList(dictAbbr,get${relationName}sList(),dictField);
			for(int i = 0;i<${relationObjectName}ListDict.size();i++){
				DictRow dr = (DictRow)${relationObjectName}ListDict.get(i);
				if(dr.getValue() == null){
					dr.setValue(new ${relationName}());
				}
			}
		}
		return ${relationObjectName}ListDict;
	}
	
	public String getDictAbbr() {
	   return dictAbbr;
	}
	public void setDictAbbr(String dictAbbr) {
	   this.dictAbbr = dictAbbr;
	}
	public String getDictField() {
	   return dictField;
	}
	public void setDictField(String dictField) {
	   this.dictField = dictField;
	}

	 #else
    public void setSelect${relationName} (List select${relationName}) {	 
		this.select${relationName} = select${relationName};
	}
	#end
	#end

    #if(!$relationshipRole.targetMany && $relationshipRole.originMany) 
           
	public void set${relationName}Id(Integer ${relationObjectName}Id) {
		this.${relationObjectName}Id = ${relationObjectName}Id;
	}
	public Integer get${relationName}Id() {
		return ${relationObjectName}Id;	
	}
	 #end	
       #end	
    #end
	  public Class getPersistentClass(){
		return ${className}.class;
	  }
	public ${className} get${className}() {
		return (${className}) getEntity();
	}
	public void set${className}(${className} ${objectName}) {
		setEntity(${objectName});	
	}


}