package ${plugin.parameter.acitionPackageName};
#set( $objectName = "$table.getVariableName()")
#set( $className = "${table.destinationClassName}")
#set( $gatherabbr = "${plugin.gatherAbbr}" )

import java.util.*;
import com.opensymphony.xwork.ActionContext;
import com.taiji.core.util.Constants;
import com.taiji.core.util.CommonTool;
import com.taiji.core.webwork.action.ProtectedDetailAction;
import com.taiji.user.domain.User;
import  ${plugin.parameter.domainPackageName}.*;
import  ${plugin.parameter.servicePackageName}.*;
import com.taiji.system.service.*;
import com.taiji.user.service.IUserService;
import com.taiji.system.domain.Position;
import com.taiji.system.domain.Ptree;
import com.taiji.system.domain.Assignment;

public class ${className}Action extends ProtectedDetailAction {
	
	private I${className}Service service;
	private ${className}Check ${objectName}Check;
	private ${className}CheckHistory ${objectName}CheckHistory;
	private ${className}History ${objectName}History;
    private String abbr="$gatherabbr";
    private IUserService userservice;
    private String rootId;
    private IPositionService positionService;  
    
 	public IPositionService getPositionService() {
		return positionService;
	}

	public void setPositionService(IPositionService positionService) {
		this.positionService = positionService;
	}

	public String getRootId() {
		return rootId;
	}

	public void setRootId(String rootId) {
		this.rootId = rootId;
	}
  
 	public IUserService getUserService(){
			return userservice;
	}
	
	public void setUserService(IUserService userservice){
			this.userservice = userservice;
	}   
  #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")     
    private ${relationName} ${relationObjectName};		 
       #end
    #end
  #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
   
   
    public ${relationName} get${relationName}(){
		return ${relationObjectName};
	}
	
    public void set${relationName}(${relationName} ${relationObjectName}){
		this.${relationObjectName} = ${relationObjectName};
	}
	 
       #end
    #end
 

	public I${className}Service get${className}Service(){
			return service;
	}
	
	public void set${className}Service(I${className}Service service){
			this.service = service;
	}
    
	public ${className}Check get${className}Check(){
		return this.${objectName}Check;
	}
	
	public void set${className}Check(${className}Check check){
		this.${objectName}Check = check;
	}
    
	public ${className} get${className}(){
		return (${className}) getEntity();
	}
	
	public void set${className}(${className} ${objectName}){
		setEntity(${objectName});
	}

	public String save(){	
	try{
		User currentUser = (User) ActionContext.getContext().getSession().get(Constants.USER_LOGIN);
  
      if(ActionContext.getContext().getSession().get("${objectName}Id")!=null){
	     setEntityId((Integer)ActionContext.getContext().getSession().get("${objectName}Id"));
	     ${className} in1 = (${className}) service.getEntityObjectById(getEntityId());
	     
	    get${className}().set${className}Check(in1.get${className}Check());	 
	      
	    #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       #if($relationshipRole.targetMany)      
    	get${className}().set${relationName}s(in1.get${relationName}s());  	    
	   #end	
	   #if($one2one)	
	      ${relationName} ${relationObjectName}Temp = in1.get${relationName}();
	   #end  
	      
       #end	
       #end   
	   
 	   #set ($keyColumn = $table.pkColumn) 
       #set ($keyvar = ${keyColumn.variableName}) 
       #set ($keyCVar = ${keyColumn.capitalisedVariableName})  
       
       CommonTool.copyBean(in1,get${className}());    
	   in1.setSubmitflag(new Integer(1));
	   in1.set${keyCVar}(getEntityId());

	   #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
 	   #set ($keyColumntarget = $target.pkColumn) 
       #set ($keyvartarget = ${keyColumntarget.variableName}) 
       #set ($keyCVartarget = ${keyColumntarget.capitalisedVariableName}) 
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       #if($one2one)      
    	  CommonTool.copyBean(${relationObjectName}Temp,${relationObjectName});
    	  ${relationObjectName}Temp.set${className}(in1);
    	  ${relationObjectName}Temp.set${keyCVartarget}(getEntityId());
    	  in1.set${relationName}(${relationObjectName}Temp);
	   #end		   
       #end	
       #end      

	      service.update(in1);
		}else{
	 #set($flag = "false")
	 #foreach($relationshipRole in $table.relationshipRoles)	 
	 #if( $relationshipRole.targetMany && $flag == "false")
	get${className}().setSubmitflag(new Integer(1));
		  #set($flag = "true")
	#end
	#end
	#foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
 	   #set ($keyColumntarget = $target.pkColumn) 
       #set ($keyvartarget = ${keyColumntarget.variableName}) 
       #set ($keyCVartarget = ${keyColumntarget.capitalisedVariableName}) 
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       #if($one2one)      
    	if(${relationObjectName}!=null)
		get${className}().set${relationName}(${relationObjectName});
		${relationObjectName}.set${className}(get${className}());
	   #end		   
       #end	
       #end 	
	
	    service.save(get${className}(),currentUser);
	    
		}
		}catch(Exception e){
			e.printStackTrace();
			return ERROR;
		}

		return SUCCESS;
	}
	public String update() {
	try{
    #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       #set ($keyColumnTarget = $target.pkColumn) 
       #set ($keyvarTarget = ${keyColumnTarget.variableName}) 
       #set ($keyCVarTarget = ${keyColumnTarget.capitalisedVariableName})
       #if($one2one)  
        ${relationName} ${relationObjectName}temp = get${className}().get${relationName}();
        Integer  ${relationObjectName}Id = ${relationObjectName}temp.get${keyCVarTarget}();
        CommonTool.copyBean(${relationObjectName}temp,${relationObjectName});
        ${relationObjectName}temp.set${keyCVarTarget}(${relationObjectName}Id);
    	get${className}().set${relationName}(${relationObjectName}temp);  	  
	    ${relationObjectName}temp.set${className}(get${className}());	
	   #end	
       #end	
    #end  
	 #set($flag = "false")
	    #foreach($relationshipRole in $table.relationshipRoles)	 
	    #if( $relationshipRole.targetMany && $flag == "false")
        get${className}().setSubmitflag(new Integer(1));
		  #set($flag = "true")
	#end
	#end
		service.update(get${className}());
		}catch(Exception e){
			e.printStackTrace();
			return ERROR;
		}
		return SUCCESS;
	}
	public String submit() {
	try{
		set${className}(service.setCheck(get${className}(),${objectName}Check));
		User currentUser = (User) ActionContext.getContext().getSession().get(Constants.USER_LOGIN);
	
		service.saveSubmit(get${className}(),currentUser,abbr);	
      }catch(Exception e){
			e.printStackTrace();
			return ERROR;
		}
		return SUCCESS;
	}
	public String check() throws Exception {
		User currentUser = (User) ActionContext.getContext().getSession().get(Constants.USER_LOGIN);
		    
		${className}Check check=get${className}().get${className}Check();
		PostTreeNode pt = service.treegetCurrentPosition(currentUser,abbr);
		check.setNextPosition(pt.getParentNode().getId());
		get${className}().set${className}Check(${objectName}Check);
    #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       #if($one2one)     
        ${relationName} ${relationObjectName}temp = get${className}().get${relationName}();
        Integer  ${relationObjectName}Id = ${relationObjectName}temp.get${keyCVarTarget}();
        CommonTool.copyBean(${relationObjectName}temp,${relationObjectName});
        ${relationObjectName}temp.set${keyCVarTarget}(${relationObjectName}Id);
    	get${className}().set${relationName}(${relationObjectName}temp);  	  
	    ${relationObjectName}temp.set${className}(get${className}());	
	   #end	
       #end	
    #end 

		service.saveCheck(get${className}(),check,currentUser,abbr);
		
		return SUCCESS;
	}
	
	public String detail() throws Exception {
	    	
		${objectName}Check  =get${className}().get${className}Check();
		 rootId = getPtreeRoot();
    #foreach($relationshipRole in $table.relationshipRoles)
       #if( $relationshipRole.enabled )
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
       #set( $relationName = "${table.getClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       #if($one2one)     
       ${relationObjectName}=get${className}().get${relationName}();	
	   #end	 
       #end	
    #end 

	 	return SUCCESS;
	}	
    public Map getPositionMap() {
    	Map m = new LinkedHashMap();
		User currentUser = (User) ActionContext.getContext().getSession().get(Constants.USER_LOGIN);
	
		PostTreeNode[] pt = service.treegetPositionList(currentUser,abbr);
		int num=pt.length;
		
		for(int i=0;i<num;i++)
		{
			m.put(new Integer(pt[i].getId().intValue()),pt[i].getName());
		}
    	return m;
    }
    public String getName()
	{
		
		${objectName}Check  = get${className}().get${className}Check();
		Integer id=${objectName}Check.getPositionid();
		PostTree pt=service.treegetPostTree(abbr);
		PostTreeNode ptn=pt.getTreeNode(id);
		return ptn.getName();
	}
	public String getUserN()
	{
		Integer rid=${objectName}Check.getProposer();
		User user=(User) userservice.getEntityObjectById(rid);
		return user.getName();
	}
	public String getUserName()
	{
		User currentUser = (User) ActionContext.getContext().getSession().get(Constants.USER_LOGIN);
		return currentUser.getName();
	}
	public Class getPersistentClass(){
	  return ${className}.class;
	}
	    public String getPtreeRoot() {
    	Position pos =positionService.getPositionByAbbr(abbr);
		User currentUser = (User) ActionContext.getContext().getSession().get(Constants.USER_LOGIN);
		List result =this.coreService.find("from Assignment as assign where assign.userId =" + currentUser.getId() + " and " + " assign.positionCaseId = " + pos.getId());
		Assignment assign = (Assignment)result.get(0);
		Integer ptreeId = assign.getPositionId();
		Ptree tree = (Ptree)this.coreService.getEntityObjectById(Ptree.class, ptreeId);
		return String.valueOf(tree.getParent().getId());

    }
}