package ${plugin.parameter.acitionPackageName};
#set( $objectName = "$table.getVariableName()")
#set( $className = "${table.destinationClassName}")

import com.taiji.core.webwork.action.ProtectedDetailAction;
import com.taiji.info.domain.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;



public class ${className}Action extends ProtectedDetailAction {
	
	private static final Log log = LogFactory.getLog(${className}Action.class);
	
    #foreach($relationshipRole in $table.relationshipRoles)
    #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
    #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
    #set( $one2one = $relationshipRole.relation.one2One )
    #set( $many2many = $relationshipRole.relation.many2Many )
    #set( $target = $relationshipRole.getTarget($plugin))
    #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())

   	#if($one2one)
   	private ${relationName} ${relationObjectName};
   	#end
   	
    #if($many2many)
   	private List select${relationName};
   	#end
   	
	#end
   
   
  	public void setEntityId(Integer entityid) {
		 super.setEntityId(entityid);
	     #foreach($relationshipRole in $table.relationshipRoles)
         #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
         #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
         #set( $one2one = $relationshipRole.relation.one2One )
         #set( $many2many = $relationshipRole.relation.many2Many )
         #set( $one2many = !$many2many && !$one2one)
         
         #if($one2one)
         if(get${className}()!=null)
         $relationObjectName = get${className}().get$relationName();
         #end
         
         #if($one2many && $relationshipRole.targetMany)
         ActionContext.getContext().getSession().put("${objectName}Id",entityid);  
         #end
         	
         #end	
	}

	public String save() throws Exception{	
		
	     #foreach($relationshipRole in $table.relationshipRoles)
         #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
         #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
         #set( $one2one = $relationshipRole.relation.one2One )
         #set( $target = $relationshipRole.getTarget($plugin))
         #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
         #set( $many2many = $relationshipRole.relation.many2Many ) 
         #set( $one2many = !$many2many && !$one2one)
         #set ($keyColumn = $target.pkColumn) 
         #set ($keyvar = ${keyColumn.variableName}) 
         #set ($keyCVar = ${keyColumn.capitalisedVariableName})
                 
         #if($one2one)
         ${relationObjectName}.set${className}(get${className}());
         get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}); 
         return super.save();       
	     #end
	     
	     #if($one2many && $relationshipRole.targetMany)
		 Integer ${objectName}Id = (Integer)ActionContext.getContext().getSession().get("${objectName}Id");
	  
	     if(${objectName}Id!=null && !${objectName}Id.equals(new Integer(0))) {
	  	    ${className} ${objectName} = (${className})coreService.getEntityObjectById(${className}.class,${objectName}Id);
	  	    ${objectName}.setSubmitflag(new Integer(1));
	  	    return super.update();
	     }
	     else {
	  	   get${className}().setSubmitflag(new Integer(1));
	  	   return super.save();
	     }     
	     #end
	   
         #if($many2many)
   	       get${className}().$table.getSetterName($relationshipRole)(getSelect${relationName}s());
   	    #end  
   	    
   	   
	     #end
	 

	}
	public String update() throws Exception {
	
	     #foreach($relationshipRole in $table.relationshipRoles)
	     #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
         #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
         #set( $one2one = $relationshipRole.relation.one2One )
         #set( $target = $relationshipRole.getTarget($plugin))
         #set( $fone2one =(($one2one && $relationshipRole.originPrimaryKey) ||($one2one && $table.isRoleOneToOnePrimaryKeys($relationshipRole, $target)))&& !$relationshipRole.isFkPk())
         
         #if($one2one)
         get${className}().$table.getSetterName($relationshipRole)(${relationObjectName}); 
		 #end
		 
		 #if($one2many && $relationshipRole.targetMany)
		 get${className}().setSubmitflag(new Integer(1));
		 #end	
		 	 
	     #if($many2many)
   	     get${className}().$table.getSetterName($relationshipRole)(getSelect${relationName}s());
   	     #end 
   	      	 
		 #end
		 
		 return super.update();
	}
     #foreach($relationshipRole in $table.relationshipRoles)
       #set( $many2many = $relationshipRole.relation.many2Many )
       #set( $one2one = $relationshipRole.relation.one2One )
       #set( $target = $relationshipRole.getTarget($plugin))
       #set( $relationName = "${table.getQualifiedDestinationClassName($relationshipRole)}")
       #set( $relationObjectName = "${table.getVariableName($relationshipRole)}")
       
       #if($one2one)
 	public ${relationName} get${relationName}() {
		return ${relationObjectName};
	}
	public void set${relationName}(${relationName} ${relationObjectName}) {
		this.${relationObjectName} = ${relationObjectName};		
	}  
	#end
	
    #if($many2many)
    
    public Map getAll${relationName}s() {
 	 Map result = new LinkedHashMap();		
		List objectList = coreService.findAll(${relationName}.class);
		if(objectList != null) {
		   Iterator iter = objectList.iterator();
		   while(iter.hasNext()) {
		       ${relationName} object =(${relationName}) iter.next();
		    //   result.put(String.valueOf(object.getId()),object.getName());	   	
		   }
		}
		return result;	   
    }	
    	
    private Set getSelect${relationName}s() {	
	 if(select${relationName}==null)
		   return null;
	 Iterator iter = select${relationName}.iterator();
	 Set ${relationObjectName}Set = new LinkedHashSet();
	 while(iter.hasNext()) {
		Integer ${relationObjectName}Id = Integer.valueOf((String)iter.next());
		${relationName} ${relationObjectName} = (${relationName}) coreService.getEntityObjectById(${relationName}.class,${relationObjectName}Id);
		${relationObjectName}Set.add(${relationObjectName});
	  }
	  return ${relationObjectName}Set; 
	}	
    public List getAllCustom${relationName}s() {
  	  List result = new ArrayList();
	  Set $relationObjectName = (Set)get${className}().$table.getGetterName($relationshipRole)();
	  Iterator iter = ${relationObjectName}.iterator();
	  while(iter.hasNext()) {
		result.add(String.valueOf(((${relationName})iter.next()).getId()));
	  }
	  return result;
	} 	
	public void setSelect${relationName}s (List select${relationName}) {
	    this.select${relationName} = select${relationName};
	}
	
	
    #end
    #end

    
    public Class getPersistentClass(){
		return ${className}.class;
	  }
	public ${className} get${className}() {
		return (${className}) getEntity();
	}
	public void set${className}(${className} ${objectName}) {
		setEntity(${objectName});	
	}


}