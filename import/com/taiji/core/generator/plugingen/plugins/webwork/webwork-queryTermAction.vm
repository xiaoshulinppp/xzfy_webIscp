package ${plugin.parameter.acitionPackageName};
#set( $objectName = "$table.getVariableName()")
#set( $tableName ="$table.getName()")
#set( $className = "${table.destinationClassName}")
#set( $flag = "true" )

import com.taiji.core.webwork.action.ProtectedAction;
import com.taiji.system.service.*;
import com.taiji.system.domain.*;
import java.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.taiji.core.generator.plugingen.DbNameConverter;
import com.taiji.core.generator.plugingen.Util;
import com.opensymphony.xwork.ActionContext;
import com.taiji.user.domain.*;
import com.taiji.core.util.Constants;

public class ${className}QueryTermAction extends ProtectedAction {
	private static final Log log = LogFactory.getLog(${className}QueryTermAction.class);
	private static final String TABLE_NAME = "${tableName}";
	private IFieldService service;
	private Map queryTermList = new LinkedHashMap();
	private ISearchstateService searchstateService; 
	private IDictionaryService dictionaryService;
	

	public String execute() throws Exception {
	 	ActionContext.getContext().getSession().remove("queryExample");
		ActionContext.getContext().getSession().remove("search_showFields");
		ActionContext.getContext().getSession().remove("search_sortField");
		ActionContext.getContext().getSession().remove("search_sortType");
		
       List queryList = service.getFields(TABLE_NAME); 
      Iterator iter = queryList.iterator();
      while(iter.hasNext()) {
       Field field = (Field) iter.next();
       String variableName = getColumnObjectName(field.getName());
       
	   queryTermList.put(variableName,field);

      }        
	  return SUCCESS;
	}
	public IFieldService getFieldService() {
		return service;
	}
	public void setFieldService(IFieldService service) {
		this.service = service;
	}
	public Map getQueryTermList() {
		return queryTermList;
	}
	public String getColumnObjectName(String columnName) {
		return (Util.decapitalise(DbNameConverter.getInstance().columnNameToVariableName(columnName)));
	}
		public void setSearchstateService(ISearchstateService searchstateService) {
		this.searchstateService = searchstateService;
	}
	public IDictionaryService getDictionaryService() {
		return dictionaryService;
	}
	public void setDictionaryService(IDictionaryService dictionaryService) {
		this.dictionaryService = dictionaryService;
	}
	public ISearchstateService getSearchstateService() {
		return searchstateService;
	}
	private String dictExpress;
	public void setDictExpress(String dictExpress) {
		this.dictExpress = dictExpress;
	}
	public String getDictExpress() {
		return dictExpress;
	}
	private List fieldList;
	public void setFieldList(List fieldList) {
		this.fieldList = fieldList;
	}
	public List getFieldList() {
		return fieldList;
	}
	private Field sortField;
	public void setSortField(Field sortField) {
		this.sortField = sortField;
	}
	public Field getSortField() {
		return sortField;
	}
	private Integer sortType;
	public void setSortType(Integer sortType) {
		this.sortType = sortType;
	}
	public Integer getSortType() {
		return sortType;
	}
	private List lastSelectedFieldList;
	public void setLastSelectedFieldList(List lastSelectedFieldList) {
		this.lastSelectedFieldList = lastSelectedFieldList;
	}
	public List getLastSelectedFieldList() {
		return lastSelectedFieldList;
	}
	private String beanName = "${className}";
	public void setFunctionName(String beanName) {

	}
	public String getBeanName() {
		return beanName;
	}
	public String advancedSearch() throws Exception {
		ActionContext.getContext().getSession().remove("searchhql");
		ActionContext.getContext().getSession().remove("search_showFields");
		ActionContext.getContext().getSession().remove("search_sortField");
		ActionContext.getContext().getSession().remove("search_sortType");
		List queryList = service.getFields(TABLE_NAME);
		Iterator iter = queryList.iterator();
		StringBuffer sb = new StringBuffer();
		sb.append("[");
		boolean first = true;
		fieldList = new LinkedList();
		Map fieldListNameMap = new HashMap();
		while (iter.hasNext()) {
			if (first) {
				first = false;
			} else {
				sb.append(",");
			}
			Field field = (Field) iter.next();
			fieldList.add(field);
			fieldListNameMap.put(field.getName(), field);
			if (field.getFromDict().booleanValue()) {
				com.taiji.system.domain.Dictionary dictionary =
				(com.taiji.system.domain.Dictionary)dictionaryService.getEntityObjectById(new Integer(field.getDictId()));
				Iterator it = dictionary.getItemSet().iterator();
				sb.append("[");
				if (it.hasNext()) {
					DictItem item = (DictItem) it.next();
					sb.append("\"" + item.getName() + "\",\"" + item.getValue() + "\"");
				}
				while (it.hasNext()) {
					DictItem item = (DictItem) it.next();
					sb.append(",\"" + item.getName() + "\",\"" + item.getValue() + "\"");
				}
				sb.append("]");
			} else {
				sb.append("[]");
			}
			String variableName = getColumnObjectName(field.getName());
			queryTermList.put(variableName, field);
		}
		sb.append("]");
		this.dictExpress = sb.toString();
		
	
		lastSelectedFieldList = new LinkedList();
		User currentUser =
			(User) ActionContext.getContext().getSession().get(
				Constants.USER_LOGIN);
		Searchstate searchstate =
			this.getSearchstateService().getSearchstate(
				currentUser.getId(),
				this.getFuncCode(),TABLE_NAME);
		if(searchstate == null){
			searchstate = new Searchstate();
		}			
		this.sortField = (Field)fieldListNameMap.get(searchstate.getSortField());
		if(sortField == null){
			sortField = new Field();
			sortField.setName("");
		}
		this.sortType = searchstate.getSortType();
		if(this.sortType == null){
			this.sortType = new Integer(0);
		}
		if (searchstate.getShowFields() != null) {
			String[] fieldNames = searchstate.getShowFields().split(",");
			for (int i = 0; i < fieldNames.length; i++) {
				Object selectedField = fieldListNameMap.get(fieldNames[i]);
				if (selectedField != null) {
					lastSelectedFieldList.add(selectedField);
				}
			}
		}
		return SUCCESS;
	}
}