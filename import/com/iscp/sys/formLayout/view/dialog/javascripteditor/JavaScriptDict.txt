Node{
  NamedNodeMap attributes;
  NodeList childNodes;
  Node firstChild;
  Node lastChild;
  String localName;
  String namespaceURI;
  Node nextSibling;
  String nodeName;
  short nodeType;
  String nodeValue;
  Document ownerDocument;
  Node parentNode; 
  String prefix;
  Node previousSibling;

  Node appendChild ( Node newChild );
  Node cloneNode ( boolean deep );
  boolean hasAttributes ( );
  boolean hasChildNodes ( );
  Node insertBefore ( Node newChild , Node refChild );
  boolean isSupported ( String feature , String version );
  void normalize ( );
  Node removeChild ( Node oldChild );
  Node replaceChild ( Node newChild , Node oldChild );
}

Attr{
  String namespaceURI ;
  Node nextSibling ;
  String nodeName ;
  short nodeType ;
  String nodeValue ;
  Document ownerDocument; 
  Element ownerElement ;
  Node parentNode; 
  String prefix ;
  Node previousSibling ;
  boolean specified ;
  String textContent ;
  String value ;

  Node appendChild ( Node newChild );
  Node cloneNode ( boolean deep ) ;
  short compareDocumentPosition ( Node other ) ;
  nsISupports getFeature ( String feature , String version ) ;
  nsIVariant getUserData ( String key );
  boolean hasAttributes ( ) ;
  boolean hasChildNodes ( ) ;
  Node insertBefore ( Node newChild , Node refChild );
  boolean isDefaultNamespace ( String namespaceURI );
  boolean isEqualNode ( Node arg );
  boolean isSameNode ( Node other );
  boolean isSupported ( String feature , String version );
  String lookupNamespaceURI ( String prefix );
  String lookupPrefix ( String namespaceURI );
  void normalize ( ) ;
  Node removeChild ( Node oldChild ) ;
  Node replaceChild ( Node newChild , Node oldChild );
  nsIVariant setUserData ( String key , nsIVariant data , nsIDOMUserDataHandler handler );
}

HTMLElement{
NamedNodeMap attributes;
NodeList childNodes;
String className;
PRInt32 clientHeight;
PRInt32 clientWidth;
String dir;
Node firstChild;
String id;
String innerHTML;
String outerHTML;
String lang;
Node lastChild;
String localName;
String namespaceURI;
Node nextSibling;
String nodeName;
short nodeType;
String nodeValue;
PRInt32 offsetHeight;
PRInt32 offsetLeft;
Element offsetParent;
PRInt32 offsetTop;
PRInt32 offsetWidth;
Document ownerDocument;
Node parentNode;
String prefix;
Node previousSibling;
PRInt32 scrollHeight;
PRInt32 scrollLeft;
PRInt32 scrollTop;
PRInt32 scrollWidth;
PRInt32 tabIndex;
String tagName;


Node appendChild ( Node newChild );
void blur ( );
Node cloneNode(boolean deep);
void focus();
String getAttribute ( String name );
Attr getAttributeNode ( String name );
Attr getAttributeNodeNS ( String namespaceURI , String localName );
String getAttributeNS ( String namespaceURI , String localName );
NodeList getElementsByTagName ( String name );
NodeList getElementsByTagNameNS ( String namespaceURI , String localName );
boolean hasAttribute ( String name );
boolean hasAttributeNS ( String namespaceURI , String localName );
boolean hasAttributes ( );
boolean hasChildNodes ( );
Node insertBefore ( Node newChild , Node refChild );
boolean isSupported ( String feature , String version );
void normalize ( ) void removeAttribute ( String name );
Attr removeAttributeNode ( Attr oldAttr );
void removeAttributeNS ( String namespaceURI , String localName );
Node removeChild ( Node oldChild );
Node replaceChild ( Node newChild , Node oldChild );
void scrollIntoView ( boolean top );
void setAttribute ( String name , String value );
Attr setAttributeNode ( Attr newAttr );
Attr setAttributeNodeNS ( Attr newAttr );
void setAttributeNS ( String namespaceURI , String qualifiedName , String value );
}

NodeList{
  int length;
  Node item(int index);
}

NamedNodeMap{
  int length;
  Node getNamedItem ( String name );
  Node getNamedItemNS ( String namespaceURI , String localName );
  Node item ( int index );
  Node removeNamedItem ( String name );
  Node removeNamedItemNS ( String namespaceURI , String localName );
  Node setNamedItem ( Node arg );
  Node setNamedItemNS ( Node arg );
}

String{
  int length;
  String subString(int start,int end);
}
Filter_alpha{
  int opacity;
  int finishopacity;
  int style;
  int startx;
  int starty;
  int finishx;
  int finishy;
}
Filter_blur{
  bool add;
  int direction;
  int strength;
}
Filter_dropshadow{
  Color color;
  int offx;
  int offy;
  bool positive;
}
Filter_glow{
  Color color;
  int strength;
}
Filter_light{
}
Filter_mask{
  Color color;
}
Filter_shadow{
  Color color;
  int direction;
}
Filter_wave{
  bool wave;
  bool add;
  int freq;
  int lightstrength;
  int phase;
  int strength;
}
Filter{
  Filter_alpha alpha;
  Filter_blur blur;
  Filter_dropshadow dropshadow;
  Filter_glow glow;
  Filter_light light;
  Filter_mask mask;
  Filter_shadow shadow;
  Filter_wave wave;
}
Style{
  Color color;
  int width;
  int height;
  var float;
  var clear;
  var display;
  var cursor;
  Filter filters;
}
_input:HTMLElement{
  String accept;
  String accesskey;
  String align;
  String alt;
  int border;
  String class;
  String dir;
  String disabled;
  int height;
  int hspace;
  String lang;
  int maxlength;
  String name;
  String readonly;
  String src;
  Style style;
  int tabindex;
  String title;
  String type;
  String usemap;
  String value;
  int vspace;
  int width;
}
input:_input{
}
radio:_input{
  String checked;
}
checkbox:_input{
  String checked;
}
inputfile:_input{
}
inputwin:_input{
}
invisible:_input{
}
hidden:_input{
}
textarea:HTMLElement{
  String accesskey;
  String class;
  int cols;
  String dir;
  String disabled;
  String id;
  String label;
  String lang;
  String name;
  String readonly;
  int rows;
  Style style;
  int tabindex;
  String title;
  String wrap;
}
select:HTMLElement{
  String accesskey;
  String class;
  String dir;
  String disabled;
  String id;
  String lang;
  String multiple;
  String name;
  int size;
  Style style;
  int tabindex;
  String title;
}
document{
  void open();
  void close();
  void clear();
  void write(String str);
  void writeln(String str);
  Color alinkColor;
  Color linkColor;
  Color vlinkColor;
  array anchors;
  array applets;
  Color bgColor;
  Color fgColor;
  Cookies cookie;
  Domain domain;
  array forms;
  array images;
  String lastModified;
  array links;
  Location location;
  Url referrer;
  String title;
  String URL;
}
window{
  bool closed;
  String defaultStatus;
  String status;
  document document;
  array frames;
  History history;
  Location location;
  String name;
  window opener;
  Frame parent;
  window self;
  window top;
  window window;
  void alert(String str);
  bool confirm(String str);
  var prompt(String title,var default);
  void close();
  void focus();
  void blur(); 
  void back();
  void forward();
  void home();
  void stop();
  void moveBy(int x,int y);
  void moveTo(int x,int y);
  void open(String url);
  void open(String url,String title);
  void open(String url,String title,String status);
  void print();
  void resizeBy(int x,int y);
  void resizeTo(int x,int y);
  var showModalDialog(String url,var obj)
  void scrollBy(int x,int y);
  void scrollTo(int x,int y);
  void setInterval(String functionName,int time);
  void clearInterval();
  void setTimeout(String functionName,int time);
  void clearTimeout();
}
tbody{
  String align;
  Color bgcolor;
  String class;
  String dir;
  String id;
  String lang;
  String style;
  String title;
  String valign;
}